$comp: "toggle";
@include lf-comp-setup($comp, "true", "true");

:host {
  @include lf-el-stretch;
}

.form-field {
  & {
    @include lf-comp-color($comp, "bg", "text");
    @include lf-el-stretch;
    @include lf-el-text("label");
    align-items: center;
    box-sizing: border-box;
    display: inline-flex;
    justify-content: center;
    /**
    * @prop --lf-#{$comp}-form-padding: Sets the padding for the #{$comp} form field.
    *                                   Defaults to => 0.5em
    */
    padding: var(--lf-#{$comp}-form-padding, 0.5em);
    vertical-align: middle;
  }

  &__label {
    @include lf-el-ellipsis;
    /**
    * @prop --lf-#{$comp}-label-min-width: Sets the min-width for the #{$comp} label.
    *                                      Defaults to => max-content
    */
    min-width: var(--lf-#{$comp}-label-min-width, max-content);
    /**
    * @prop --lf-#{$comp}-label-padding-left: Sets the left padding for the #{$comp} label.
    *                                         Defaults to => 1em
    */
    padding-left: var(--lf-#{$comp}-label-padding-left, 1em);
  }

  &--leading {
    .form-field__label {
      margin-right: 0;
      order: -1;
      padding-left: 0;
      /**
      * @prop --lf-#{$comp}-label-padding-right: Sets the right padding for the #{$comp} label.
      *                                          Defaults to => 1em
      */
      padding-right: var(--lf-#{$comp}-label-padding-right, 1em);
    }
  }
}

.toggle {
  & {
    align-items: center;
    display: inline-flex;
    /**
    * @prop --lf-#{$comp}-margin: Sets the margin for the #{$comp} component.
    *                             Defaults to => 1em 0.5em
    */
    margin: var(--lf-#{$comp}-margin, 1em 0.5em);
    /**
    * @prop --lf-#{$comp}-min-width: Sets the min-width for the #{$comp} component.
    *                                Defaults to => 4em
    */
    min-width: var(--lf-#{$comp}-min-width, 4em);
    outline: none;
    position: relative;
    user-select: none;
  }

  &:hover:before {
    @include lf-comp-glassmorphize($comp, "surface", "bg", 0.125, 12px, true);
    @include lf-el-transition("fade-in-out");
    border-radius: 50%;
    content: "";
    height: 2.5em;
    left: calc(50% - 0.5em);
    padding: 0.5em;
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 2.5em;
  }

  &--active {
    .toggle__track {
      @include lf-comp-glassmorphize($comp, "primary", "bg", 0.675);
    }

    .toggle__thumb {
      transform: translateX(100%) translateY(-50%);
      @include lf-comp-glassmorphize($comp, "primary", "bg", 0.775);
    }
  }

  &__track {
    & {
      @include lf-comp-border($comp, "radius");
      @include lf-comp-glassmorphize($comp, "surface", "bg", 0.275, 8px, true);
      @include lf-el-transition("springy");
      border-radius: var(--lf-ui-border-radius, 1em);
      box-sizing: border-box;
      /**
      * @prop --lf-#{$comp}-track-height: Sets the height for the #{$comp} component's track.
      *                                   Defaults to => 0.5em
      */
      height: var(--lf-#{$comp}-track-height, 0.5em);
      position: relative;
      /**
      * @prop --lf-#{$comp}-track-width: Sets the width for the #{$comp} component's track.
      *                                  Defaults to => 3em
      */
      width: var(--lf-#{$comp}-track-width, 3em);
    }
  }

  &__thumb {
    & {
      @include lf-comp-glassmorphize($comp, "surface", "bg", 0.375, 12px, true);
      @include lf-el-transition("springy");
      border-radius: 50%;
      cursor: pointer;
      /**
      * @prop --lf-#{$comp}-thumb-size: Sets the size for the #{$comp} component's thumb.
      *                                 Defaults to => 1.5em
      */
      height: var(--lf-#{$comp}-thumb-size, 1.5em);
      left: 0;
      overflow: hidden;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      width: var(--lf-#{$comp}-thumb-size, 1.5em);
    }

    &:hover {
      @include lf-comp-glassmorphize($comp, "surface", "bg", 0.8);
    }
  }

  &__native-control {
    cursor: pointer;
    /**
    * @prop --lf-#{$comp}-input-height: Sets the height for the #{$comp} component's input.
    *                                   Defaults to => 3em
    */
    height: var(--lf-#{$comp}-input-height, 3em);
    left: -0.5em;
    opacity: 0;
    position: absolute;
    top: -1.25em;
    width: 4em;
    z-index: 1;
  }
}
