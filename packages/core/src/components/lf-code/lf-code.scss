$comp: "code";
$borderC: 1px solid rgb(var(--lf-color-border));
@include lf-comp-setup($comp, "true", "false", "true");

:host {
  @include lf-el-stretch;
}

#lf-component,
.container {
  overflow: auto;
  position: relative;
}

.container {
  @include lf-el-stretch;
}

.code {
  & {
    display: grid;
    grid-template-rows: 1fr;
    /**
    * @prop --lf-#{$comp}-height: Sets the height for the #{$comp} component.
    *                             Defaults to => 100%
    */
    height: var(--lf-#{$comp}-height, 100%);
  }

  &--has-header {
    grid-template-rows: max-content 1fr;
  }

  &__header {
    & {
      @include lf-comp-border($comp, "radius");
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
      @include lf-comp-glassmorphize($comp, "surface", "all", 0.775);
      align-items: center;
      border-left-color: rgb(
        var(--lf-#{$comp}-color-primary, rgb(var(--lf-color-primary)))
      );
      border-left-style: outset;
      border-left-width: 0.25em;
      /**
      * @prop --lf-#{$comp}-border-right: Sets the border right for the #{$comp} component.
      *                                   Defaults to => 1px solid var(--lf-color-border)
      */
      border-right: var(--lf-#{$comp}-border-right, $borderC);
      /**
      * @prop --lf-#{$comp}-border-top: Sets the border top for the #{$comp} component.
      *                                 Defaults to => 1px solid var(--lf-color-border)
      */
      border-top: var(--lf-#{comp}-border-top, $borderC);
      display: flex;
      height: var(--lf-#{$comp}-header-height, 2.25em);
      justify-content: var(--lf-#{$comp}-header-justify, space-between);
      padding: var(--lf-#{$comp}-header-padding, 0.25em 0.75em);
    }

    &--sticky {
      /**
      * @prop --lf-#{$comp}-header-position: Sets the position for the header.
      *                                      Defaults to => sticky
      */
      position: var(--lf-#{$comp}-header-position, sticky);
      top: 0;
      z-index: 1;
    }
  }

  &__title {
    @include lf-el-text("caption");
    padding: 0.5em;
    text-transform: uppercase;
  }
}

.body,
pre,
:not(pre) > code {
  @include lf-comp-border($comp);
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  box-sizing: border-box;
  @include lf-comp-glassmorphize($comp, "surface", "all", 0.375);
}

.body {
  @include lf-el-text("body");
  box-sizing: border-box;
  margin-bottom: 0;
  padding: 1em;
  white-space: pre-line;
}

:not(pre) > code,
pre {
  @include lf-el-text("code");
}

code ::-moz-selection,
code::-moz-selection,
pre ::-moz-selection,
pre::-moz-selection,
code ::selection,
code::selection,
pre ::selection,
pre::selection {
  @include lf-comp-color($comp, "primary");
  text-shadow: none;
}

pre {
  box-sizing: border-box;
  margin: 0;
  min-height: calc(100% - 2.25em);
  overflow: auto;
  padding: 1.75em 1em;
  white-space: pre-wrap;
}

:not(pre) > code {
  padding: 0.1em;
  white-space: normal;
}

.token.cdata,
.token.comment,
.token.doctype,
.token.prolog {
  @include lf-comp-color($comp, "bg", "text", 0.75);
}

.token.punctuation {
  @include lf-comp-color($comp, "bg", "text", 0.875);
}

.token.bold,
.token.important {
  font-weight: 700;
}

.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}

.token.boolean,
.token.constant,
.token.deleted,
.token.number,
.token.property,
.token.symbol,
.token.tag {
  color: rgb(var(--lf-color-data-1));
}

.token.attr-name,
.token.builtin,
.token.char,
.token.inserted,
.token.selector,
.token.string {
  color: rgb(var(--lf-color-data-2));
}

.token.atrule,
.token.attr-value,
.token.keyword {
  color: rgb(var(--lf--color-data-3));
}

.token.class-name,
.token.function {
  color: rgb(var(--lf-color-data-4));
}

.token.important,
.token.regex,
.token.variable {
  color: rgb(var(--lf-color-data-5));
}
