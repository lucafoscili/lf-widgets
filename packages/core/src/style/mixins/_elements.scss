/*******************************************
 * @mixin lf-el-ellipsis
 * Truncates text to a single line with an ellipsis.
 * 
 * Usage:
 *   .my-element {
 *     @include lf-el-ellipsis;
 *   }
 *******************************************/
@mixin lf-el-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
/*******************************************
 * @mixin lf-el-rotation
 * Animates an element rotation around a given axis.
 *
 * @param {String} $axis     - Axis to rotate around ("x", "y", or "z")
 * @param {Angle}  $degrees  - Final rotation amount (e.g. 180deg)
 * @param {Time}   $duration - Animation duration (e.g. 300ms)
 * @param {TimingFunction} $easing 
 *   Easing function (e.g. cubic-bezier(0.42, 0, 0.58, 1))
 *******************************************/
@mixin lf-el-rotation(
  $axis: z,
  $degrees: 180deg,
  $duration: 300ms,
  $easing: cubic-bezier(0.42, 0, 0.58, 1)
) {
  animation: lf-rotation-#{$axis} $duration $easing;

  @include lf-keyframe(
    lf-rotation-#{$axis},
    (
      from: (
        transform: rotate#{$axis }(0deg),
      ),
      to: (
        transform: rotate#{$axis }($degrees),
      ),
    )
  );
}
/*******************************************
 * @mixin lf-el-sticky
 * Makes an element sticky at the given edge.
 *
 * @param {String} $scope   - Which edge to stick to (e.g. "top", "bottom")
 * @param {Number|String} $zindex 
 *   Z-index to apply (defaults to var(--lf-ui-zindex-header) - 1)
 *******************************************/
@mixin lf-el-sticky(
  $scope: top,
  $zindex: calc(var(--lf-ui-zindex-header) - 1)
) {
  position: sticky;
  #{$scope}: 0;
  z-index: $zindex;
}
/*******************************************
 * @mixin lf-el-stretch
 * Forces an element to take the full width and height
 * of its containing block.
 *******************************************/
@mixin lf-el-stretch() {
  width: 100%;
  height: 100%;
}
/*******************************************
 * @mixin lf-el-text
 * Applies text styles (e.g. font-size, line-height, color)
 * based on a "typography" map.
 *
 * @param {String} $scope      - A key that maps to $lf-typography 
 *                               (e.g. "body", "title", "subtitle")
 * @param {Bool}   $responsive - If true, might handle responsive text
 *******************************************/
@mixin lf-el-text($scope: body, $responsive: false) {
  $scope: to-lower-case($scope);

  @if map-has-key($lf-typography, $scope) {
    $properties: map-get($lf-typography, $scope);

    @each $property, $value in $properties {
      @if $property == hover {
        &:hover,
        &:focus {
          @each $hover-property, $hover-value in $value {
            #{$hover-property}: #{$hover-value};
          }
        }
      } @else {
        #{$property}: #{$value};
      }
    }
  } @else {
    @warn "Unknown text style '#{$scope}'.";
  }
}
/*******************************************
 * @mixin lf-el-transition
 * Applies a transition to an element based on
 * a preset (in $lf-transitions) or a fallback.
 *
 * @param {String} $preset     - Key in $lf-transitions map (e.g. "default", "fast")
 * @param {String} $properties - Which CSS properties to transition (e.g. "all")
 *******************************************/
@mixin lf-el-transition($preset: default, $properties: all) {
  $transition: map-get($lf-transitions, $preset);

  @if $transition {
    transition: #{$properties} nth($transition, 1) nth($transition, 2);
  } @else {
    @warn "Unknown transition preset '#{$preset}'. Falling back to 'default'.";
    transition: #{$properties}
      nth(map-get($lf-transitions, default), 1)
      nth(map-get($lf-transitions, default), 2);
  }
}
/*******************************************
 * @mixin lf-el-zoom
 * Applies a "zoom in" animation to an element.
 *
 * @param {Number} $scale - Scale factor (e.g. 1.1 for 110%)
 *******************************************/
@mixin lf-el-zoom($scale: 1.1) {
  animation: lf-zoom 150ms cubic-bezier(0.42, 0, 0.58, 1);
  @include lf-keyframe(lf-zoom, map-get($lf-keyframes, zoom));
}
