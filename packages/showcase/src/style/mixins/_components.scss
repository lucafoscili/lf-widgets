/*******************************************
 * @mixin lf-comp-border
 * Applies border styling (color, width, and optional radius)
 * for a given component.
 *
 * @param {String} $comp  - Component ID/key (used to look up custom vars)
 * @param {String} $scope - Controls which aspect to style ("all", "border", "radius")
 * @param {String} $style - Border style (e.g. "solid", "dashed")
 * @param {String} $width - Border width (e.g. "1px", "2px")
 *******************************************/
@mixin lf-comp-border($comp, $scope: all, $style: solid, $width: 1px) {
  $scope: to-lower-case($scope);

  border: 0;
  border-style: $style;

  @if $scope == "border" or $scope == "all" {
    /**
     * @prop --lf-#{$comp}-border-color: Sets the border color for the #{$comp} component.
     *                                   Defaults to => var(--lf-color-border)
     */
    border-color: rgba(
      var(--lf-#{$comp}-border-color, var(--lf-color-border)),
      1
    );
    border-width: $width;
  }

  @if $scope == "radius" or $scope == "all" {
    /**
     * @prop --lf-#{$comp}-border-radius: Sets the border radius for the #{$comp} component.
     *                                    Defaults to => var(--lf-ui-border-radius)
     */
    border-radius: var(--lf-#{$comp}-border-radius, var(--lf-ui-border-radius));
  }
}
/*******************************************
 * @mixin lf-comp-color
 * Applies a background-color + text-color for a component
 * based on a color name, optionally reversed (i.e. "on-color" as background).
 *
 * @param {String}  $comp    - Component ID/key
 * @param {String}  $color   - Color name (e.g. "bg", "primary", "danger", etc.)
 * @param {String}  $scope   - "all" (bg + text) or just "bg" or "text"
 * @param {Number}  $alpha   - Alpha for the background color (0..1)
 * @param {Boolean} $reverse - If true, background uses "on-<color>" and text uses "<color>"
 *******************************************/
@mixin lf-comp-color($comp, $color, $scope: "all", $alpha: 1, $reverse: false) {
  $scope: to-lower-case($scope);
  $bgVar: if($reverse, "color-on-#{$color}", "color-#{$color}");
  $textVar: if($reverse, "color-#{$color}", "color-on-#{$color}");

  @if $scope == "all" or $scope == "bg" {
    /**
     * @prop --lf-#{$comp}-#{$bgVar}: Sets the #{$bgVar} color for the #{$comp} component.
     *                                Defaults to => var(--lf-#{$bgVar})
     */
    background-color: rgba(
      var(--lf-#{$comp}-#{$bgVar}, var(--lf-#{$bgVar})),
      $alpha
    );
  }

  @if $scope == "all" or $scope == "text" {
    /**
     * @prop --lf-#{$comp}-#{$textVar}: Sets the #{$textVar} color for the #{$comp} component.
     *                                  Defaults to => var(--lf-#{$textVar})
     */
    color: rgb(var(--lf-#{$comp}-#{$textVar}, var(--lf-#{$textVar})));
  }
}
/*******************************************
 * @mixin lf-comp-font
 * Applies a particular font family to a component based on its scope.
 *
 * @param {String} $comp  - Component name/ID
 * @param {String} $scope - Which font family (e.g. "primary", "secondary", "monospace", etc.)
 *******************************************/
@mixin lf-comp-font($comp, $scope: "primary") {
  @each $font, $value in $lf-fonts {
    @if $scope == $font {
      font-family: var(--lf-#{$comp}-font-family, $value);
    }
  }
}
/*******************************************
 * @mixin lf-comp-glassmorphize
 * Applies a "glass" effect via backdrop blur plus a background color from lf-comp-color.
 *
 * @param {String}  $comp    - Component ID/key
 * @param {String}  $color   - Base color token (e.g. "bg", "primary", etc.)
 * @param {String}  $scope   - "all" (bg + text) or just "bg" or "text"
 * @param {Number}  $alpha   - Alpha for the glass background color
 * @param {Length}  $blur    - Blur radius (e.g. "8px")
 * @param {Boolean} $reverse - If true, background uses "on-<color>" and text uses "<color>"
 *******************************************/
@mixin lf-comp-glassmorphize(
  $comp,
  $color: "bg",
  $scope: "all",
  $alpha: 0.375,
  $blur: 8px,
  $reverse: false
) {
  @include lf-comp-color($comp, $color, $scope, $alpha, $reverse);
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}
/*******************************************
 * @mixin lf-comp-icon
 * Applies an SVG mask as an icon plus a background color for that icon area.
 *
 * @param {String}  $comp   - Component ID/key
 * @param {String}  $icon   - Icon name (maps to --lf-icon-{$icon})
 * @param {String}  $color  - Base color token (e.g. "bg", "primary", etc.)
 * @param {Length}  $size   - Icon size (e.g. "1.5em")
 * @param {Number}  $alpha  - Alpha for the background color
 * @param {Boolean} $reverse - If true, background uses "on-<color>" and text uses "<color>"
 *******************************************/
@mixin lf-comp-icon(
  $comp,
  $icon: "",
  $color: "bg",
  $size: 1.5em,
  $alpha: 1,
  $reverse: true
) {
  @if $icon != "" {
    -webkit-mask: var(--lf-icon-#{$icon});
    mask: var(--lf-icon-#{$icon});
    -webkit-mask-position: center;
    -webkit-mask-repeat: no-repeat;
    -webkit-mask-size: contain;
    mask-position: center;
    mask-repeat: no-repeat;
    mask-size: contain;
  }

  @include lf-comp-color($comp, $color, "bg", $alpha, $reverse);

  height: $size;
  width: $size;
  overflow: hidden;
}
/*******************************************
 * @mixin lf-comp-setup
 * One-stop setup for a component: applies default font-size,
 * scrollbar, ripple states, fade in, etc.
 *
 * @param {String}  $comp       - Component ID/key
 * @param {String}  $has-states - "true" to include fw-state-colors, otherwise "false"
 * @param {String}  $has-ripple - "true" to include ripple styles, otherwise "false"
 * @param {String}  $has-fade-in - "true" to include fade-in transitions, otherwise "false"
 * @param {String}  $has-portal - "true" to include portal styles, otherwise "false"
 *******************************************/
@mixin lf-comp-setup(
  $comp,
  $has-states: "false",
  $has-ripple: "false",
  $has-fade-in: "false",
  $has-portal: "false"
) {
  @include lf-app-scrollbar;

  @if $has-ripple == "true" {
    @include lf-fw-ripple;
    @include lf-fw-ripple-surface;
  }

  @if $has-states == "true" {
    @include lf-fw-state-colors($comp);
  }

  @if $has-fade-in == "true" {
    @include lf-fw-fade-in;
  }

  @if $has-portal == "true" {
    @include lf-fw-portal;
  }

  :host {
    display: block;
    /**
     * @prop --lf-#{$comp}-font-family: Sets the primary font family for the #{$comp} component.
     *                                  Defaults to => var(--lf-font-family-primary)
     */
    font-family: var(--lf-#{$comp}-font-family, var(--lf-font-family-primary));

    /**
     * @prop --lf-#{$comp}-font-size: Sets the font size for the #{$comp} component.
     *                                Defaults to => var(--lf-font-size)
     */
    font-size: var(--lf-#{$comp}-font-size, var(--lf-font-size));
  }

  @each $size, $value in $lf-sizes {
    :host([lf-ui-size="#{$size}"]) {
      font-size: calc(
        var(--lf-#{$comp}-font-size, var(--lf-font-size)) * #{$value}
      );
    }
  }

  #lf-component {
    @include lf-el-stretch;
  }
}
