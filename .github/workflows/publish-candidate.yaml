name: Publish NPM Package (candidate)

on:
  # Manual trigger option
  workflow_dispatch:
    inputs:
      force-publish:
        description: "Force publish even if not from bump PR"
        required: false
        type: boolean
        default: false

  # Trigger after merge: push to candidate (merge commit will be on candidate)
  push:
    branches:
      - candidate

jobs:
  publish-rc:
    # Skip loopback runs from automation; allow manual force publish.
    if: |
      (
        github.event_name == 'push' &&
        github.actor != 'github-actions[bot]'
      ) || (github.event_name == 'workflow_dispatch' && inputs.force-publish)

    runs-on: ubuntu-latest
    environment: Development

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: candidate
          fetch-depth: 0
          fetch-tags: true

      - name: Verify Release Label
        id: verify_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.force-publish }}" = "true" ]; then
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "should_publish=false" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          SHA="${{ github.sha }}"
          REPO="${{ github.repository }}"
          API="${{ github.api_url }}"

          PRS=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.groot-preview+json" \
            "$API/repos/$REPO/commits/$SHA/pulls")

          PR_NUMBER=$(echo "$PRS" | jq -r '.[0].number // empty')

          if [ -z "$PR_NUMBER" ]; then
            echo "No associated pull request found for commit $SHA"
            echo "should_publish=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          LABELS=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$API/repos/$REPO/issues/$PR_NUMBER/labels")

          if echo "$LABELS" | jq -e --arg label 'release:rc' 'map(.name) | index($label)' >/dev/null; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "Pull request #$PR_NUMBER does not have the release:rc label"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup and Build
        uses: ./.github/actions/setup
        with:
          node-version: "18.x"
          install-immutable: "true"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: steps.verify_release.outputs.should_publish == 'true'

      - name: Build Packages
        run: yarn build
        if: steps.verify_release.outputs.should_publish == 'true'

      - name: Discard Uncommitted Changes
        run: git reset --hard HEAD
        if: steps.verify_release.outputs.should_publish == 'true'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
        if: steps.verify_release.outputs.should_publish == 'true'

      - name: Setup NPM Authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          chmod 600 ~/.npmrc
        if: steps.verify_release.outputs.should_publish == 'true'

      - name: Check if Packages Need Publishing
        id: check_publish
        run: |
          echo "--- Debug: git status ---"
          git status --porcelain=2 || true
          echo "--- Debug: recent commits ---"
          git --no-pager log --oneline --decorate -n 10 || true
          echo "--- Debug: tags ---"
          git tag --sort=-version:refname | head -n 20 || true
          echo "--- Debug: package.json versions (head) ---"
          for f in packages/*/package.json; do echo "--- $f ---"; jq -r '.name + "@" + .version' "$f" || cat "$f"; done || true
          echo "--- Debug: lerna changed output ---"
          PACKAGES=$(npx lerna changed --json 2>/dev/null || echo "[]")
          echo "LERNA_CHANGED=$PACKAGES"
          if [ "$PACKAGES" = "[]" ]; then
            echo "needs_publish=false" >> $GITHUB_OUTPUT
            echo "No packages need publishing"
          else
            echo "needs_publish=true" >> $GITHUB_OUTPUT
            echo "Packages to publish: $PACKAGES"
          fi
        if: steps.verify_release.outputs.should_publish == 'true'

      - name: Get Previous Tag
        if: steps.verify_release.outputs.should_publish == 'true' && steps.check_publish.outputs.needs_publish == 'true'
        id: previous_tag
        run: |
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n 1 || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Publish Packages with Lerna
        if: steps.verify_release.outputs.should_publish == 'true' && steps.check_publish.outputs.needs_publish == 'true'
        id: publish
        run: |
          npx lerna publish from-package --yes --dist-tag rc | tee lerna-output.log
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract Version from Lerna Output
        if: steps.verify_release.outputs.should_publish == 'true' && steps.check_publish.outputs.needs_publish == 'true'
        id: get_version
        run: |
          PUBLISHED_VERSION=$(grep -oP '(?<=@lf-widgets/core@)[^ ]+' lerna-output.log | head -1 || echo "")
          if [ -n "$PUBLISHED_VERSION" ]; then
            echo "version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No version found in lerna output"
            exit 1
          fi

      - name: Create and Push Tag
        if: steps.verify_release.outputs.should_publish == 'true' && steps.check_publish.outputs.needs_publish == 'true' && steps.get_version.outputs.version != ''
        run: |
          git tag "v${{ steps.get_version.outputs.version }}"
          git push origin --tags

      - name: Generate Release Notes from Commits
        if: steps.verify_release.outputs.should_publish == 'true' && steps.check_publish.outputs.needs_publish == 'true' && steps.get_version.outputs.version != ''
        id: generate_notes
        run: |
          PREV_TAG='${{ steps.previous_tag.outputs.previous_tag }}'
          if [ -n "$PREV_TAG" ] && git rev-parse --verify "$PREV_TAG" >/dev/null 2>&1; then
            COMMITS=$(git log --oneline --no-merges "$PREV_TAG"..HEAD)
          else
            COMMITS=$(git log --oneline --no-merges --max-count=50)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.verify_release.outputs.should_publish == 'true' && steps.check_publish.outputs.needs_publish == 'true' && steps.get_version.outputs.version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          body: |
            Version: `${{ steps.get_version.outputs.version }}`

            ## Commits

            ${{ steps.generate_notes.outputs.commits }}

            ## Install

            ```bash
            npm install @lf-widgets/core@rc
            # or
            npm install @lf-widgets/core@${{ steps.get_version.outputs.version }}
            ```
          prerelease: true
          generate_release_notes: false
