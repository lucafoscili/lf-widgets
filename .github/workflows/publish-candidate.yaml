name: Publish NPM Package (candidate)

on:
  # Manual trigger option
  workflow_dispatch:
    inputs:
      force-publish:
        description: "Force publish even if not from bump PR"
        required: false
        type: boolean
        default: false

  # Trigger on PR merge to candidate
  pull_request:
    types: [closed]
    branches:
      - candidate

jobs:
  publish-rc:
    # Only run if:
    # 1. PR was merged (not just closed)
    # 2. Has the release:rc label OR force-publish is true
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release:rc'))
      || (github.event_name == 'workflow_dispatch' && inputs.force-publish)

    runs-on: ubuntu-latest
    environment: Development

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: candidate
          fetch-depth: 0
          fetch-tags: true

      - name: Setup and Build
        uses: ./.github/actions/setup
        with:
          node-version: "18.x"
          install-immutable: "true"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build Packages
        run: yarn build

      - name: Discard Uncommitted Changes
        run: git reset --hard HEAD

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup NPM Authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          chmod 600 ~/.npmrc

      - name: Check if Packages Need Publishing
        id: check_publish
        run: |
          # Check if there are packages that need publishing
          PACKAGES=$(npx lerna changed --json 2>/dev/null || echo "[]")
          if [ "$PACKAGES" = "[]" ]; then
            echo "needs_publish=false" >> $GITHUB_OUTPUT
            echo "No packages need publishing"
          else
            echo "needs_publish=true" >> $GITHUB_OUTPUT
            echo "Packages to publish: $PACKAGES"
          fi

      - name: Publish Packages with Lerna
        if: steps.check_publish.outputs.needs_publish == 'true'
        id: publish
        run: |
          npx lerna publish from-package --yes --dist-tag rc | tee lerna-output.log
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract Version from Lerna Output
        if: steps.check_publish.outputs.needs_publish == 'true'
        id: get_version
        run: |
          PUBLISHED_VERSION=$(grep -oP '(?<=@lf-widgets/core@)[^ ]+' lerna-output.log | head -1 || echo "")
          if [ -n "$PUBLISHED_VERSION" ]; then
            echo "version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No version found in lerna output"
            exit 1
          fi

      - name: Create and Push Tag
        if: steps.check_publish.outputs.needs_publish == 'true' && steps.get_version.outputs.version != ''
        run: |
          git tag "v${{ steps.get_version.outputs.version }}"
          git push origin --tags